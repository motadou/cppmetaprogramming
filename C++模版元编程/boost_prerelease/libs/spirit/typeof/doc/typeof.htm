<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./typeof_files/filelist.xml">
<title>Contents</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Your Magesty</o:Author>
  <o:LastAuthor>Your Magesty</o:LastAuthor>
  <o:Revision>17</o:Revision>
  <o:TotalTime>788</o:TotalTime>
  <o:LastPrinted>2004-07-02T04:26:00Z</o:LastPrinted>
  <o:Created>2004-06-19T17:31:00Z</o:Created>
  <o:LastSaved>2004-09-12T22:27:00Z</o:LastSaved>
  <o:Pages>5</o:Pages>
  <o:Words>1884</o:Words>
  <o:Characters>10744</o:Characters>
  <o:Company>Dell - Personal Systems Group</o:Company>
  <o:Lines>89</o:Lines>
  <o:Paragraphs>21</o:Paragraphs>
  <o:CharactersWithSpaces>13194</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-font-kerning:16.0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:20.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.code, li.code, div.code
	{mso-style-name:code;
	mso-style-update:auto;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	background:#E6E6E6;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:427044933;
	mso-list-type:hybrid;
	mso-list-template-ids:660604084 757728306 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:24.0pt;
	mso-level-number-position:left;
	margin-left:24.0pt;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l1
	{mso-list-id:445852875;
	mso-list-type:hybrid;
	mso-list-template-ids:614103534 757728306 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2
	{mso-list-id:1294751090;
	mso-list-type:hybrid;
	mso-list-template-ids:1709228486 757728306 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3
	{mso-list-id:1388336102;
	mso-list-type:hybrid;
	mso-list-template-ids:-1483053960 757728306 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4
	{mso-list-id:1610694499;
	mso-list-type:hybrid;
	mso-list-template-ids:-420946034 757728306 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoTitle><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt;
font-family:"Times New Roman"'>THE BOOST TYPEOF LIBRARY<o:p></o:p></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><!--[if supportFields]><span
style='mso-element:field-begin'></span><span style="mso-spacerun:
yes"> </span>TOC \o &quot;1-3&quot; \n \h \z <span style='mso-element:field-separator'></span><![endif]--><span
class=MsoHyperlink><a href="#_Toc76603228">Motivation</a></span></p>

<p class=MsoToc2 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603229">Why typeof?</a></span></p>

<p class=MsoToc2 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603230">Why typeof emulation?</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603231">Example</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603232">The 3 participating parties</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603233">Features supported</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603234">Registration</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603235">Usage</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603236">Limitations</a></span></p>

<p class=MsoToc1 style='tab-stops:right dotted 431.5pt'><span
class=MsoHyperlink><a href="#_Toc76603237">Acknowledgements</a></span></p>

<p class=MsoNormal><!--[if supportFields]><span style='mso-element:field-end'></span><![endif]-->&nbsp;</p>

<h1><a name="_Toc76603228">Motivation</a></h1>

<h2><a name="_Toc76603229">Why typeof?</a></h2>

<p class=MsoNormal>Today many template libraries supply object generators to
simplify object creation by utilizing the C++ template argument deduction
facility.<span style="mso-spacerun: yes">  </span>Consider std::pair.<span
style="mso-spacerun: yes">  </span>In order to instantiate this class template
and create a temporary object of this instantiation, one has to supply both
type parameters and value parameters:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>std::pair&lt;int, double&gt;(5, 3.14159);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To avoid this duplication, STL supplies the std::make_pair
object generator.<span style="mso-spacerun: yes">  </span>When it is used, the
types of template parameters are deduced from supplied function arguments:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>std::make_pair(5, 3.14159);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For the temporary objects it is enough.<span
style="mso-spacerun: yes">  </span>However, when a named object needs to be
allocated, the problem appears again:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>std::pair&lt;int, double&gt; p(5, 3.14159);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The object generator no longer helps:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>std::pair&lt;int, double&gt; p = std::make_pair(5, 3.14159);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It would be nice to deduce the type of the object (on the
left) from the expression it is initialized with (on the right), but the
current C++ syntax doesnt allow for this.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The above example demonstrates the essence of the problem
but doesnt demonstrate its scale.<span style="mso-spacerun: yes">  </span>Many
libraries, especially expression template libraries, create objects of really
complicated types, and go a long way to hide this complexity behind object
generators.<span style="mso-spacerun: yes">  </span>Consider a nit Boost.Lambda
functor:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>_1 &gt; 15 &amp;&amp; _2 &lt; 20</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If one wanted to allocate a named copy of such an innocently
looking functor, she would have to specify something like this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>lambda_functor&lt;</p>

<p class=code><span style='mso-tab-count:1'>      </span>lambda_functor_base&lt;</p>

<p class=code><span style='mso-tab-count:2'>            </span>logical_action&lt;and_action&gt;,</p>

<p class=code><span style='mso-tab-count:2'>            </span>tuple&lt;</p>

<p class=code><span style='mso-tab-count:3'>                  </span>lambda_functor&lt;</p>

<p class=code><span style='mso-tab-count:4'>                        </span>lambda_functor_base&lt;</p>

<p class=code><span style='mso-tab-count:5'>                              </span>relational_action&lt;greater_action&gt;,</p>

<p class=code><span style='mso-tab-count:5'>                              </span>tuple&lt;</p>

<p class=code><span style='mso-tab-count:6'>                                    </span>lambda_functor&lt;placeholder&lt;1&gt;
&gt;,</p>

<p class=code><span style='mso-tab-count:6'>                                    </span>int
const</p>

<p class=code><span style='mso-tab-count:5'>                              </span>&gt;
</p>

<p class=code><span style='mso-tab-count:4'>                        </span>&gt;
</p>

<p class=code><span style='mso-tab-count:3'>                  </span>&gt;,</p>

<p class=code><span style='mso-tab-count:3'>                  </span>lambda_functor&lt;</p>

<p class=code><span style='mso-tab-count:4'>                        </span>lambda_functor_base&lt;</p>

<p class=code><span style='mso-tab-count:5'>                              </span>relational_action&lt;less_action&gt;,</p>

<p class=code><span style='mso-tab-count:5'>                              </span>tuple&lt;</p>

<p class=code><span style='mso-tab-count:6'>                                    </span>lambda_functor&lt;placeholder&lt;2&gt;
&gt;,</p>

<p class=code><span style='mso-tab-count:6'>                                    </span>int
const </p>

<p class=code><span style='mso-tab-count:5'>                              </span>&gt;
</p>

<p class=code><span style='mso-tab-count:4'>                        </span>&gt;
</p>

<p class=code><span style='mso-tab-count:3'>                  </span>&gt;</p>

<p class=code><span style='mso-tab-count:2'>            </span>&gt; </p>

<p class=code><span style='mso-tab-count:1'>      </span>&gt; </p>

<p class=code>&gt;</p>

<p class=code>f = _1 &gt; 15 &amp;&amp; _2 &lt; 20;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Not exactly elegant.<span style="mso-spacerun: yes"> 
</span>To solve this problem, the C++ standard committee is considering a few additions
to the standard language, such as typeof/decltype and auto (see <a
href="http://www.osl.iu.edu/~jajarvi/publications/papers/decltype_n1478.pdf">http://www.osl.iu.edu/~jajarvi/publications/papers/decltype_n1478.pdf</a>).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The typeof operator (or decltype, which is a slightly
different flavor of typeof) allows one to determine the type of an expression
at compile time.<span style="mso-spacerun: yes">  </span>Using typeof, the
above example can be simplified drastically:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>typeof(_1 &gt; 15 &amp;&amp; _2 &lt; 20) f = _1 &gt; 15
&amp;&amp; _2 &lt; 20;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Much better, but there still is duplication.<span
style="mso-spacerun: yes">  </span>The auto type solves the rest of the
problem:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>auto f = _1 &gt; 15 &amp;&amp; _2 &lt; 20;<span
style="mso-spacerun: yes">  </span></p>

<h2><a name="_Toc76603230">Why typeof emulation?</a></h2>

<p class=MsoNormal>According to a rough estimate, at the time of this writing
(June 2004) the introduction of the typeof, auto, etc., into the C++ standard
is not going to happen at least within a year.<span style="mso-spacerun: yes"> 
</span>Even after its done, some time still has to pass before most compilers
implement this feature.<span style="mso-spacerun: yes">  </span>But even after
that, there always are legacy compilers to support (for example now, in 2004, many
people are still using VC6, long after VC7.x became available).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Considering extreme usefulness of the feature <i>right now</i>,
it seems to make sense to try to emulate it at a library level.<span
style="mso-spacerun: yes">  </span>Such emulation will inevitably have major
drawbacks, such as additional responsibilities put on the library users, slower
compiles, etc., but in the end, depending on the context, the benefits will
likely outweigh.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Boost.Typeof implements such emulation utilizing template
and preprocessor meta-programming facilities provided by Boost MPL and
Preprocessor libraries.<span style="mso-spacerun: yes">   </span></p>

<h1><a name="_Toc76603231">Example</a></h1>

<p class=MsoNormal>Here is how one could re-write the above examples using
BOOST_AUTO:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=0 cellpadding=0 width="100%" style='width:100.0%;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><b>Boost.Typeof<o:p></o:p></b></p>
  </td>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><b>typeof<o:p></o:p></b></p>
  </td>
 </tr>
 <tr>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>BOOST_AUTO(p, std::make_pair(5, 3.14159));<span
  style="mso-spacerun: yes">  </span><o:p></o:p></span></p>
  </td>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>auto p = std::make_pair(5, 3.14159);<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>BOOST_AUTO(f, </span><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New"'>_1 &gt; 15 &amp;&amp; _2
  &lt; 20</span><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>);<o:p></o:p></span></p>
  </td>
  <td width="50%" valign=top style='width:50.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  6.0pt;margin-left:0in'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>auto f = </span><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New"'>_1 &gt; 15 &amp;&amp; _2
  &lt; 20</span><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;
  font-family:"Courier New"'>;<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Looks like a pretty good approximation.<span
style="mso-spacerun: yes">  </span>However, there is some cost.<span
style="mso-spacerun: yes">  </span>Since, unlike the compiler, the library doesnt
know much about types the expression is combined of, the user must help by
providing some information.<span style="mso-spacerun: yes">  </span>For the
first example something like following has to be specified:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(std::pair, 2);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first line:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>does pretty much what it says: increments the
BOOST_TYPEOF_REGISTRATION_GROUP symbolic constant.&nbsp;&nbsp;This constant
is&nbsp;used by all registration macros, and must be defined to some unique
integer in every source or header file that contains any registration.<span
style="mso-spacerun: yes">  </span>Incrementing it insures that it is, indeed,
unique. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The&nbsp;second line&nbsp;registers std::pair as a template
with two parameters.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once any types and templates are registered, the library can
handle any combination of those.<span style="mso-spacerun: yes">  </span>Since
all the fundamental types are pre-registered by the typeof library, the above
registration makes it possible to also write something like this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>BOOST_AUTO(p,<span style="mso-spacerun: yes">  </span></p>

<p class=code><span style="mso-spacerun: yes">  </span>std::make_pair(</p>

<p class=code><span style="mso-spacerun: yes">    </span>std::make_pair(5,
3.14159),</p>

<p class=code><span style="mso-spacerun: yes">   
</span>std::make_pair(2.71828, 6)));</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The more complicated Lambda example above requires some more
registration:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()</p>

<p class=code>&nbsp;</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::tuples::tuple, 2);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::lambda_functor, 1);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::lambda_functor_base,
2);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::relational_action,
1);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::logical_action, 1);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::other_action, 1);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::greater_action);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::less_action);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::and_action);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::placeholder&lt;1&gt;);</p>

<p class=code>BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::placeholder&lt;2&gt;);</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc76603232">The 3 participating parties</a></h1>

<p class=MsoNormal>It may seem that the price for the ability to discover the
expressions type is too high: rather large amount of registration is
required.<span style="mso-spacerun: yes">  </span>However note that all of the
above registration is done only once, and after that,&nbsp;any combination of
the registered types and templates would be handled.&nbsp; Moreover, this
registration is typically done not by the end-user, but rather by a layer on
top of some library (in this example -- Boost.Lambda). </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When thinking about this, its helpful to consider three
parties: the typeof facility, the library (probably built on expression
templates principle), and the end-user.<span style="mso-spacerun: yes"> 
</span>The typeof facility is responsible for registering fundamental
types.<span style="mso-spacerun: yes">  </span>The library can register its own
types and templates.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In the best-case scenario, if the expressions always consist
of only fundamental types and library-defined types and templates, a library
author can achieve the impression that the typeof is natively supported for her
library.<span style="mso-spacerun: yes">  </span>On the other hand, the more
often expressions contain user-defined types, the more responsibility is put on
the end-user, and therefore the less attractive this approach becomes.<span
style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Thus, the ratio of user-defined types in the expressions
should be the main factor to consider when deciding whether or not to apply
this facility. </p>

<h1><a name="_Toc76603233">Features supported</a></h1>

<p class=MsoNormal>The Boost.Typeof<span style="mso-spacerun: yes"> 
</span>library pre-registers fundamental types.<span style="mso-spacerun:
yes">  </span>For these types, and for any other types/templates defined by the
user library or end-user, any combination of the following is supported:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Pointers;</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>References (except top-level);</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Consts (except top-level);</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Arrays;</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Function pointers;</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Pointers to member functions;</p>

<p class=MsoNormal style='margin-left:24.0pt;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list 24.0pt'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Pointers to data members.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For example the following type:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>int&amp; (*)(const char*, double[5], void(*)(short))</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>is supported right away, and something like:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>void (MyClass::*)(int MyClass::*, MyClass[10]) const</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>is supported provided MyClass is registered. </p>

<h1><a name="_Toc76603234">Registration</a></h1>

<p class=MsoNormal>Registration may be done by either a library author or an
end-user.<span style="mso-spacerun: yes">  </span>The purpose of registration
is to create a pair of (partial) template specializations for a given type or
template.<span style="mso-spacerun: yes">  </span>One of such specializations
will encode the type into an MPL sequence of integers, and the other  decode
it.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Three macros are provided to simplify the registration: </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo4;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BOOST_TYPEOF_REGISTER_TYPE(Type);</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo4;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BOOST_TYPEOF_REGISTER_TEMPLATE(Name, nParams);</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo4;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>BOOST_TYPEOF_REGISTER_TEMPLATE_X(Name, ParamSeq);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All three rely on the integer value defined by
BOOST_TYPEOF_REGISTRATION_GROUP.<span style="mso-spacerun: yes">  </span>This
value should be unique for each file, since it is used in conjunction with
__LINE__ preprocessor macro to generate unique integer identifiers to assign to
types and templates.<span style="mso-spacerun: yes">  </span>To establish a
unique value for BOOST_TYPEOF_REGISTRATION_GROUP, the following line should be
specified before the actual registration is done:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A type is registered by simply supplying its name to the
BOOST_TYPEOF_REGISTER_TYPE macro.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Two macros are provided for template registration.<span
style="mso-spacerun: yes">  </span>First of them,
BOOST_TYPEOF_REGISTER_TEMPLATE, accepts template name and the number of
template parameters.<span style="mso-spacerun: yes">  </span>Only templates
with type parameters are supported by this macro.<span style="mso-spacerun:
yes">  </span>If one wants to register a template with integral parameters,
BOOST_TYPEOF_REGISTER_TEMPLATE_X macro should be used.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The BOOST_TYPEOF_REGISTER_TEMPLATE_X macro accepts a
template name and a preprocessor sequence describing template parameters, where
each parameter should be described as one of the following:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>class</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>typename</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>[unsigned] char</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>[unsigned] short</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>[unsigned] int</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>[unsigned] long</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>unsigned</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l4 level1 lfo6;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>bool</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>For example:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE_X(foo, (class)(unsigned
int)(bool));</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>A template is encoded by combining its integer identifier
with results of encoding its parameters.<span style="mso-spacerun: yes"> 
</span>If a template has default parameters, it might be a good idea to
register it more than once:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(std::set, 3); </p>

<p class=code>BOOST_TYPEOF_REGISTER_TEMPLATE(std::set, 1);</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The above would result in two different pairs of template
specializations, the latter one  more specialized.<span style="mso-spacerun:
yes">  </span>Consider std::set&lt;int[, std::less&lt;int&gt;,
std::allocator&lt;int&gt; ]&gt;.<span style="mso-spacerun: yes">  </span>In
general this type would be encoded by 6 integers:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>std::set, int, std::less, int, std::allocator, int</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>However, because the second registration was done, in this
particular case only two integers would be required, thus saving on default
parameters:</p>

<p class=MsoToc1>&nbsp;</p>

<p class=MsoNormal>std::set, int</p>

<h1><a name="_Toc76603235">Usage</a></h1>

<p class=MsoNormal>The usage is pretty straightforward.<span
style="mso-spacerun: yes">  </span><b><span style='font-family:Arial'>BOOST_TYPEOF</span></b>
is used to discover the type of the expression, like following:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>BOOST_TYPEOF(f) f1; // compare with: typeof(f) f1;</p>

<p class=code>f1 = f; </p>

<p class=MsoNormal><br>
<b><span style='font-family:Arial'>BOOST_AUTO</span></b> is used to allocate a
named object initialized with a given expression such as:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>BOOST_AUTO(f, _1 &gt; 15 &amp;&amp; _2 &lt; 20); // compare with:
auto f = _1 &gt; 15 &amp;&amp; _2 &lt; 20; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A (const) reference can be allocated like this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=code>const int&amp; foo()</p>

<p class=code>{</p>

<p class=code style='text-indent:.5in'>static int n;</p>

<p class=code style='text-indent:.5in'>return n;</p>

<p class=code>} </p>

<p class=code>&nbsp;</p>

<p class=code>//later:</p>

<p class=code>BOOST_AUTO(const&amp; var, foo()); // compare with: auto
const&amp; var = foo();</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:Arial'>BOOST_TYPEOF_TPL</span></b>
and <b><span style='font-family:Arial'>BOOST_AUTO_TPL</span></b>, accordingly,
should be used in templates when the expression depends on template
parameters.<span style="mso-spacerun: yes">  </span>These macros take care of adding
or avoiding the keyword typename, depending on whether the native typeof
support or emulation is being used.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Another macro, <b><span style='font-family:Arial'>BOOST_TYPEOF_PRESERVE_LVALUE</span></b>,
is an attempt to emulate the decltype.<span style="mso-spacerun: yes"> 
</span>Its rules, however, are directly built on the rules of binding a
reference, and therefore differ from the ones of real decltype:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=0 cellspacing=0 cellpadding=0 width="100%" style='width:100.0%;
 border-collapse:collapse;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt'><b>expr<o:p></o:p></b></p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt'><b>decltype<o:p></o:p></b></p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt'><b>BOOST_TYPEOF_PRESERVE_LVALUE<o:p></o:p></b></p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int i;</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int ci = 0;</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp; ri = i</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp;</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp; cri = ci;</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp;</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int foo();</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>const int foo();<o:p></o:p></b></p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>const int<o:p></o:p></b></p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>const int&amp;<o:p></o:p></b></p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp; foo();</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int&amp;</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoToc1>int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp; foo();</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>const int&amp;</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoToc1>const int&amp;</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>21</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
 </tr>
 <tr>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int(21)</p>
  </td>
  <td width="33%" valign=top style='width:33.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
  <td width="34%" valign=top style='width:34.0%;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>int</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><br>
Of all these rules, the highlighted one seems to be the most unfortunate. </p>

<h1><a name="_Toc76603236">Limits and limitations</a></h1>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l1 level1 lfo8;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>The number of nodes in the expression determines the
size of an MPL vector required to encode the type.<span style="mso-spacerun:
yes">  </span>It is limited by BOOST_TYPEOF_LIMIT_SIZE (by default 50), which
is, in turn, limited by the maximum number of template parameters supported by
the compiler.</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l1 level1 lfo8;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>The number of function parameters supported is limited
by BOOST_TYPEOF_FUN_PARAMS_SUPPORTED, by default 10.<span style="mso-spacerun:
yes">  </span>This applies to function pointers and to pointers to member
functions.</p>

<h1><a name="_Toc76603237">Acknowledgements</a></h1>

<p class=MsoNormal>The following people provided support, gave valuable
comments, or in any other way contributed to the library development (this list
is under construction):</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l3 level1 lfo10;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>David Abrahams; </p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l3 level1 lfo10;
tab-stops:list .25in'><![if !supportLists]><span style='font-family:Wingdings'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Joel de Guzman;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Copyright © 2004 Arkadiy Vertleyb&nbsp;</p>

</div>

</body>

</html>
